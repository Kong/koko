syntax = "proto3";

package kong.relay.service.v1;

import "kong/admin/model/v1/cluster.proto";
import "kong/admin/model/v1/status.proto";
import "kong/nonpublic/v1/node_status.proto";

option go_package = "github.com/kong/koko/internal/gen/kong/relay/service/v1;v1";

service StatusService {
  // UpdateStatus updates the status of the entity referenced within the status.
  // If a status for the entity exists, then it is replaced with the new status.
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);
  // ClearStatus deletes any status associated with the entity in the request.
  rpc ClearStatus(ClearStatusRequest) returns (ClearStatusResponse);

  rpc UpdateExpectedHash(UpdateExpectedHashRequest) returns (UpdateExpectedHashResponse);

  rpc UpdateNodeStatus(UpdateNodeStatusRequest) returns (UpdateNodeStatusResponse);
}

message UpdateStatusRequest {
  admin.model.v1.Status item = 1;
  admin.model.v1.RequestCluster cluster = 2;
}

message UpdateStatusResponse {
  admin.model.v1.Status item = 1;
}

message ClearStatusRequest {
  admin.model.v1.EntityReference context_reference = 1;
  admin.model.v1.RequestCluster cluster = 2;
}

message ClearStatusResponse {}

message UpdateExpectedHashRequest {
  string hash = 1;
  admin.model.v1.RequestCluster cluster = 2;
}

message UpdateExpectedHashResponse {}

message UpdateNodeStatusRequest {
  nonpublic.v1.NodeStatus item = 1;
  admin.model.v1.RequestCluster cluster = 2;
}

message UpdateNodeStatusResponse {}
