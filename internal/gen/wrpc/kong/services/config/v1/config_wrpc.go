// Code generated by protoc-gen-go-wrpc. DO NOT EDIT
// protoc-gen-go-wrpc version: v0.0.0-20210914213024-d4348db6b815

package v1

import (
	context "context"
	wrpc "github.com/kong/go-wrpc/wrpc"
)

type ConfigService interface {
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error)
	SyncConfig(context.Context, *SyncConfigRequest) (*SyncConfigResponse, error)
	PingCP(context.Context, *PingCPRequest) (*PingCPResponse, error)
}

type ConfigServiceClient struct {
	Peer *wrpc.Peer
}

func (c *ConfigServiceClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest) (*GetCapabilitiesResponse, error) {
	var out GetCapabilitiesResponse
	err := c.Peer.Do(ctx, 1, 1, in, &out)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *ConfigServiceClient) SyncConfig(ctx context.Context, in *SyncConfigRequest) (*SyncConfigResponse, error) {
	var out SyncConfigResponse
	err := c.Peer.Do(ctx, 1, 2, in, &out)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *ConfigServiceClient) PingCP(ctx context.Context, in *PingCPRequest) (*PingCPResponse, error) {
	var out PingCPResponse
	err := c.Peer.Do(ctx, 1, 3, in, &out)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

type ConfigServiceServer struct {
	ConfigService ConfigService
}

func (s *ConfigServiceServer) ID() wrpc.ID {
	return 1
}

func (s *ConfigServiceServer) RPC(rpc wrpc.ID) wrpc.RPC {
	switch rpc {
	case 1:
		return wrpc.RPCImpl{
			HandlerFunc: func(ctx context.Context, decode func(interface{}) error) (interface{}, error) {
				var in GetCapabilitiesRequest
				err := decode(&in)
				if err != nil {
					return nil, err
				}
				return s.ConfigService.GetCapabilities(ctx, &in)
			},
		}
	case 2:
		return wrpc.RPCImpl{
			HandlerFunc: func(ctx context.Context, decode func(interface{}) error) (interface{}, error) {
				var in SyncConfigRequest
				err := decode(&in)
				if err != nil {
					return nil, err
				}
				return s.ConfigService.SyncConfig(ctx, &in)
			},
		}
	case 3:
		return wrpc.RPCImpl{
			HandlerFunc: func(ctx context.Context, decode func(interface{}) error) (interface{}, error) {
				var in PingCPRequest
				err := decode(&in)
				if err != nil {
					return nil, err
				}
				return s.ConfigService.PingCP(ctx, &in)
			},
		}
	default:
		return nil
	}
}
