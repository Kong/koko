// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kong/admin/service/v1/ca_certificate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CACertificateServiceClient is the client API for CACertificateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CACertificateServiceClient interface {
	GetCACertificate(ctx context.Context, in *GetCACertificateRequest, opts ...grpc.CallOption) (*GetCACertificateResponse, error)
	CreateCACertificate(ctx context.Context, in *CreateCACertificateRequest, opts ...grpc.CallOption) (*CreateCACertificateResponse, error)
	UpsertCACertificate(ctx context.Context, in *UpsertCACertificateRequest, opts ...grpc.CallOption) (*UpsertCACertificateResponse, error)
	DeleteCACertificate(ctx context.Context, in *DeleteCACertificateRequest, opts ...grpc.CallOption) (*DeleteCACertificateResponse, error)
	ListCACertificates(ctx context.Context, in *ListCACertificatesRequest, opts ...grpc.CallOption) (*ListCACertificatesResponse, error)
}

type cACertificateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCACertificateServiceClient(cc grpc.ClientConnInterface) CACertificateServiceClient {
	return &cACertificateServiceClient{cc}
}

func (c *cACertificateServiceClient) GetCACertificate(ctx context.Context, in *GetCACertificateRequest, opts ...grpc.CallOption) (*GetCACertificateResponse, error) {
	out := new(GetCACertificateResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.CACertificateService/GetCACertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cACertificateServiceClient) CreateCACertificate(ctx context.Context, in *CreateCACertificateRequest, opts ...grpc.CallOption) (*CreateCACertificateResponse, error) {
	out := new(CreateCACertificateResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.CACertificateService/CreateCACertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cACertificateServiceClient) UpsertCACertificate(ctx context.Context, in *UpsertCACertificateRequest, opts ...grpc.CallOption) (*UpsertCACertificateResponse, error) {
	out := new(UpsertCACertificateResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.CACertificateService/UpsertCACertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cACertificateServiceClient) DeleteCACertificate(ctx context.Context, in *DeleteCACertificateRequest, opts ...grpc.CallOption) (*DeleteCACertificateResponse, error) {
	out := new(DeleteCACertificateResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.CACertificateService/DeleteCACertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cACertificateServiceClient) ListCACertificates(ctx context.Context, in *ListCACertificatesRequest, opts ...grpc.CallOption) (*ListCACertificatesResponse, error) {
	out := new(ListCACertificatesResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.CACertificateService/ListCACertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CACertificateServiceServer is the server API for CACertificateService service.
// All implementations must embed UnimplementedCACertificateServiceServer
// for forward compatibility
type CACertificateServiceServer interface {
	GetCACertificate(context.Context, *GetCACertificateRequest) (*GetCACertificateResponse, error)
	CreateCACertificate(context.Context, *CreateCACertificateRequest) (*CreateCACertificateResponse, error)
	UpsertCACertificate(context.Context, *UpsertCACertificateRequest) (*UpsertCACertificateResponse, error)
	DeleteCACertificate(context.Context, *DeleteCACertificateRequest) (*DeleteCACertificateResponse, error)
	ListCACertificates(context.Context, *ListCACertificatesRequest) (*ListCACertificatesResponse, error)
	mustEmbedUnimplementedCACertificateServiceServer()
}

// UnimplementedCACertificateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCACertificateServiceServer struct {
}

func (UnimplementedCACertificateServiceServer) GetCACertificate(context.Context, *GetCACertificateRequest) (*GetCACertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCACertificate not implemented")
}
func (UnimplementedCACertificateServiceServer) CreateCACertificate(context.Context, *CreateCACertificateRequest) (*CreateCACertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCACertificate not implemented")
}
func (UnimplementedCACertificateServiceServer) UpsertCACertificate(context.Context, *UpsertCACertificateRequest) (*UpsertCACertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCACertificate not implemented")
}
func (UnimplementedCACertificateServiceServer) DeleteCACertificate(context.Context, *DeleteCACertificateRequest) (*DeleteCACertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCACertificate not implemented")
}
func (UnimplementedCACertificateServiceServer) ListCACertificates(context.Context, *ListCACertificatesRequest) (*ListCACertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCACertificates not implemented")
}
func (UnimplementedCACertificateServiceServer) mustEmbedUnimplementedCACertificateServiceServer() {}

// UnsafeCACertificateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CACertificateServiceServer will
// result in compilation errors.
type UnsafeCACertificateServiceServer interface {
	mustEmbedUnimplementedCACertificateServiceServer()
}

func RegisterCACertificateServiceServer(s grpc.ServiceRegistrar, srv CACertificateServiceServer) {
	s.RegisterService(&CACertificateService_ServiceDesc, srv)
}

func _CACertificateService_GetCACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCACertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CACertificateServiceServer).GetCACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.CACertificateService/GetCACertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CACertificateServiceServer).GetCACertificate(ctx, req.(*GetCACertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CACertificateService_CreateCACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCACertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CACertificateServiceServer).CreateCACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.CACertificateService/CreateCACertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CACertificateServiceServer).CreateCACertificate(ctx, req.(*CreateCACertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CACertificateService_UpsertCACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCACertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CACertificateServiceServer).UpsertCACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.CACertificateService/UpsertCACertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CACertificateServiceServer).UpsertCACertificate(ctx, req.(*UpsertCACertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CACertificateService_DeleteCACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCACertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CACertificateServiceServer).DeleteCACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.CACertificateService/DeleteCACertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CACertificateServiceServer).DeleteCACertificate(ctx, req.(*DeleteCACertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CACertificateService_ListCACertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCACertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CACertificateServiceServer).ListCACertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.CACertificateService/ListCACertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CACertificateServiceServer).ListCACertificates(ctx, req.(*ListCACertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CACertificateService_ServiceDesc is the grpc.ServiceDesc for CACertificateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CACertificateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong.admin.service.v1.CACertificateService",
	HandlerType: (*CACertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCACertificate",
			Handler:    _CACertificateService_GetCACertificate_Handler,
		},
		{
			MethodName: "CreateCACertificate",
			Handler:    _CACertificateService_CreateCACertificate_Handler,
		},
		{
			MethodName: "UpsertCACertificate",
			Handler:    _CACertificateService_UpsertCACertificate_Handler,
		},
		{
			MethodName: "DeleteCACertificate",
			Handler:    _CACertificateService_DeleteCACertificate_Handler,
		},
		{
			MethodName: "ListCACertificates",
			Handler:    _CACertificateService_ListCACertificates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kong/admin/service/v1/ca_certificate.proto",
}
