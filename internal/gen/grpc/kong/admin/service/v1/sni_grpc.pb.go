// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kong/admin/service/v1/sni.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SNIServiceClient is the client API for SNIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SNIServiceClient interface {
	GetSNI(ctx context.Context, in *GetSNIRequest, opts ...grpc.CallOption) (*GetSNIResponse, error)
	CreateSNI(ctx context.Context, in *CreateSNIRequest, opts ...grpc.CallOption) (*CreateSNIResponse, error)
	UpsertSNI(ctx context.Context, in *UpsertSNIRequest, opts ...grpc.CallOption) (*UpsertSNIResponse, error)
	DeleteSNI(ctx context.Context, in *DeleteSNIRequest, opts ...grpc.CallOption) (*DeleteSNIResponse, error)
	ListSNIs(ctx context.Context, in *ListSNIsRequest, opts ...grpc.CallOption) (*ListSNIsResponse, error)
}

type sNIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSNIServiceClient(cc grpc.ClientConnInterface) SNIServiceClient {
	return &sNIServiceClient{cc}
}

func (c *sNIServiceClient) GetSNI(ctx context.Context, in *GetSNIRequest, opts ...grpc.CallOption) (*GetSNIResponse, error) {
	out := new(GetSNIResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.SNIService/GetSNI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNIServiceClient) CreateSNI(ctx context.Context, in *CreateSNIRequest, opts ...grpc.CallOption) (*CreateSNIResponse, error) {
	out := new(CreateSNIResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.SNIService/CreateSNI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNIServiceClient) UpsertSNI(ctx context.Context, in *UpsertSNIRequest, opts ...grpc.CallOption) (*UpsertSNIResponse, error) {
	out := new(UpsertSNIResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.SNIService/UpsertSNI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNIServiceClient) DeleteSNI(ctx context.Context, in *DeleteSNIRequest, opts ...grpc.CallOption) (*DeleteSNIResponse, error) {
	out := new(DeleteSNIResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.SNIService/DeleteSNI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNIServiceClient) ListSNIs(ctx context.Context, in *ListSNIsRequest, opts ...grpc.CallOption) (*ListSNIsResponse, error) {
	out := new(ListSNIsResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.SNIService/ListSNIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SNIServiceServer is the server API for SNIService service.
// All implementations must embed UnimplementedSNIServiceServer
// for forward compatibility
type SNIServiceServer interface {
	GetSNI(context.Context, *GetSNIRequest) (*GetSNIResponse, error)
	CreateSNI(context.Context, *CreateSNIRequest) (*CreateSNIResponse, error)
	UpsertSNI(context.Context, *UpsertSNIRequest) (*UpsertSNIResponse, error)
	DeleteSNI(context.Context, *DeleteSNIRequest) (*DeleteSNIResponse, error)
	ListSNIs(context.Context, *ListSNIsRequest) (*ListSNIsResponse, error)
	mustEmbedUnimplementedSNIServiceServer()
}

// UnimplementedSNIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSNIServiceServer struct {
}

func (UnimplementedSNIServiceServer) GetSNI(context.Context, *GetSNIRequest) (*GetSNIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSNI not implemented")
}
func (UnimplementedSNIServiceServer) CreateSNI(context.Context, *CreateSNIRequest) (*CreateSNIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSNI not implemented")
}
func (UnimplementedSNIServiceServer) UpsertSNI(context.Context, *UpsertSNIRequest) (*UpsertSNIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSNI not implemented")
}
func (UnimplementedSNIServiceServer) DeleteSNI(context.Context, *DeleteSNIRequest) (*DeleteSNIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSNI not implemented")
}
func (UnimplementedSNIServiceServer) ListSNIs(context.Context, *ListSNIsRequest) (*ListSNIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSNIs not implemented")
}
func (UnimplementedSNIServiceServer) mustEmbedUnimplementedSNIServiceServer() {}

// UnsafeSNIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SNIServiceServer will
// result in compilation errors.
type UnsafeSNIServiceServer interface {
	mustEmbedUnimplementedSNIServiceServer()
}

func RegisterSNIServiceServer(s grpc.ServiceRegistrar, srv SNIServiceServer) {
	s.RegisterService(&SNIService_ServiceDesc, srv)
}

func _SNIService_GetSNI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNIServiceServer).GetSNI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.SNIService/GetSNI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNIServiceServer).GetSNI(ctx, req.(*GetSNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNIService_CreateSNI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNIServiceServer).CreateSNI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.SNIService/CreateSNI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNIServiceServer).CreateSNI(ctx, req.(*CreateSNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNIService_UpsertSNI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNIServiceServer).UpsertSNI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.SNIService/UpsertSNI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNIServiceServer).UpsertSNI(ctx, req.(*UpsertSNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNIService_DeleteSNI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNIServiceServer).DeleteSNI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.SNIService/DeleteSNI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNIServiceServer).DeleteSNI(ctx, req.(*DeleteSNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNIService_ListSNIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSNIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNIServiceServer).ListSNIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.SNIService/ListSNIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNIServiceServer).ListSNIs(ctx, req.(*ListSNIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SNIService_ServiceDesc is the grpc.ServiceDesc for SNIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SNIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong.admin.service.v1.SNIService",
	HandlerType: (*SNIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSNI",
			Handler:    _SNIService_GetSNI_Handler,
		},
		{
			MethodName: "CreateSNI",
			Handler:    _SNIService_CreateSNI_Handler,
		},
		{
			MethodName: "UpsertSNI",
			Handler:    _SNIService_UpsertSNI_Handler,
		},
		{
			MethodName: "DeleteSNI",
			Handler:    _SNIService_DeleteSNI_Handler,
		},
		{
			MethodName: "ListSNIs",
			Handler:    _SNIService_ListSNIs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kong/admin/service/v1/sni.proto",
}
