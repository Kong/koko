// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kong/admin/service/v1/key.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyServiceClient is the client API for KeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyServiceClient interface {
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	UpsertKey(ctx context.Context, in *UpsertKeyRequest, opts ...grpc.CallOption) (*UpsertKeyResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
}

type keyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyServiceClient(cc grpc.ClientConnInterface) KeyServiceClient {
	return &keyServiceClient{cc}
}

func (c *keyServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeyService/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeyService/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) UpsertKey(ctx context.Context, in *UpsertKeyRequest, opts ...grpc.CallOption) (*UpsertKeyResponse, error) {
	out := new(UpsertKeyResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeyService/UpsertKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeyService/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeyService/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServiceServer is the server API for KeyService service.
// All implementations must embed UnimplementedKeyServiceServer
// for forward compatibility
type KeyServiceServer interface {
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	UpsertKey(context.Context, *UpsertKeyRequest) (*UpsertKeyResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	mustEmbedUnimplementedKeyServiceServer()
}

// UnimplementedKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyServiceServer struct {
}

func (UnimplementedKeyServiceServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeyServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKeyServiceServer) UpsertKey(context.Context, *UpsertKeyRequest) (*UpsertKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertKey not implemented")
}
func (UnimplementedKeyServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKeyServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {}

// UnsafeKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServiceServer will
// result in compilation errors.
type UnsafeKeyServiceServer interface {
	mustEmbedUnimplementedKeyServiceServer()
}

func RegisterKeyServiceServer(s grpc.ServiceRegistrar, srv KeyServiceServer) {
	s.RegisterService(&KeyService_ServiceDesc, srv)
}

func _KeyService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeyService/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeyService/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_UpsertKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).UpsertKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeyService/UpsertKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).UpsertKey(ctx, req.(*UpsertKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeyService/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeyService/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyService_ServiceDesc is the grpc.ServiceDesc for KeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong.admin.service.v1.KeyService",
	HandlerType: (*KeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _KeyService_GetKey_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _KeyService_CreateKey_Handler,
		},
		{
			MethodName: "UpsertKey",
			Handler:    _KeyService_UpsertKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeyService_DeleteKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _KeyService_ListKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kong/admin/service/v1/key.proto",
}

// KeySetServiceClient is the client API for KeySetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeySetServiceClient interface {
	GetKeySet(ctx context.Context, in *GetKeySetRequest, opts ...grpc.CallOption) (*GetKeySetResponse, error)
	CreateKeySet(ctx context.Context, in *CreateKeySetRequest, opts ...grpc.CallOption) (*CreateKeySetResponse, error)
	UpsertKeySet(ctx context.Context, in *UpsertKeySetRequest, opts ...grpc.CallOption) (*UpsertKeySetResponse, error)
	DeleteKeySet(ctx context.Context, in *DeleteKeySetRequest, opts ...grpc.CallOption) (*DeleteKeySetResponse, error)
	ListKeySets(ctx context.Context, in *ListKeySetsRequest, opts ...grpc.CallOption) (*ListKeySetsResponse, error)
}

type keySetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeySetServiceClient(cc grpc.ClientConnInterface) KeySetServiceClient {
	return &keySetServiceClient{cc}
}

func (c *keySetServiceClient) GetKeySet(ctx context.Context, in *GetKeySetRequest, opts ...grpc.CallOption) (*GetKeySetResponse, error) {
	out := new(GetKeySetResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeySetService/GetKeySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keySetServiceClient) CreateKeySet(ctx context.Context, in *CreateKeySetRequest, opts ...grpc.CallOption) (*CreateKeySetResponse, error) {
	out := new(CreateKeySetResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeySetService/CreateKeySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keySetServiceClient) UpsertKeySet(ctx context.Context, in *UpsertKeySetRequest, opts ...grpc.CallOption) (*UpsertKeySetResponse, error) {
	out := new(UpsertKeySetResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeySetService/UpsertKeySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keySetServiceClient) DeleteKeySet(ctx context.Context, in *DeleteKeySetRequest, opts ...grpc.CallOption) (*DeleteKeySetResponse, error) {
	out := new(DeleteKeySetResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeySetService/DeleteKeySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keySetServiceClient) ListKeySets(ctx context.Context, in *ListKeySetsRequest, opts ...grpc.CallOption) (*ListKeySetsResponse, error) {
	out := new(ListKeySetsResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.KeySetService/ListKeySets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeySetServiceServer is the server API for KeySetService service.
// All implementations must embed UnimplementedKeySetServiceServer
// for forward compatibility
type KeySetServiceServer interface {
	GetKeySet(context.Context, *GetKeySetRequest) (*GetKeySetResponse, error)
	CreateKeySet(context.Context, *CreateKeySetRequest) (*CreateKeySetResponse, error)
	UpsertKeySet(context.Context, *UpsertKeySetRequest) (*UpsertKeySetResponse, error)
	DeleteKeySet(context.Context, *DeleteKeySetRequest) (*DeleteKeySetResponse, error)
	ListKeySets(context.Context, *ListKeySetsRequest) (*ListKeySetsResponse, error)
	mustEmbedUnimplementedKeySetServiceServer()
}

// UnimplementedKeySetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeySetServiceServer struct {
}

func (UnimplementedKeySetServiceServer) GetKeySet(context.Context, *GetKeySetRequest) (*GetKeySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeySet not implemented")
}
func (UnimplementedKeySetServiceServer) CreateKeySet(context.Context, *CreateKeySetRequest) (*CreateKeySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeySet not implemented")
}
func (UnimplementedKeySetServiceServer) UpsertKeySet(context.Context, *UpsertKeySetRequest) (*UpsertKeySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertKeySet not implemented")
}
func (UnimplementedKeySetServiceServer) DeleteKeySet(context.Context, *DeleteKeySetRequest) (*DeleteKeySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeySet not implemented")
}
func (UnimplementedKeySetServiceServer) ListKeySets(context.Context, *ListKeySetsRequest) (*ListKeySetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeySets not implemented")
}
func (UnimplementedKeySetServiceServer) mustEmbedUnimplementedKeySetServiceServer() {}

// UnsafeKeySetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeySetServiceServer will
// result in compilation errors.
type UnsafeKeySetServiceServer interface {
	mustEmbedUnimplementedKeySetServiceServer()
}

func RegisterKeySetServiceServer(s grpc.ServiceRegistrar, srv KeySetServiceServer) {
	s.RegisterService(&KeySetService_ServiceDesc, srv)
}

func _KeySetService_GetKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeySetServiceServer).GetKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeySetService/GetKeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeySetServiceServer).GetKeySet(ctx, req.(*GetKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeySetService_CreateKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeySetServiceServer).CreateKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeySetService/CreateKeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeySetServiceServer).CreateKeySet(ctx, req.(*CreateKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeySetService_UpsertKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeySetServiceServer).UpsertKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeySetService/UpsertKeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeySetServiceServer).UpsertKeySet(ctx, req.(*UpsertKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeySetService_DeleteKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeySetServiceServer).DeleteKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeySetService/DeleteKeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeySetServiceServer).DeleteKeySet(ctx, req.(*DeleteKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeySetService_ListKeySets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeySetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeySetServiceServer).ListKeySets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.KeySetService/ListKeySets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeySetServiceServer).ListKeySets(ctx, req.(*ListKeySetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeySetService_ServiceDesc is the grpc.ServiceDesc for KeySetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeySetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong.admin.service.v1.KeySetService",
	HandlerType: (*KeySetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeySet",
			Handler:    _KeySetService_GetKeySet_Handler,
		},
		{
			MethodName: "CreateKeySet",
			Handler:    _KeySetService_CreateKeySet_Handler,
		},
		{
			MethodName: "UpsertKeySet",
			Handler:    _KeySetService_UpsertKeySet_Handler,
		},
		{
			MethodName: "DeleteKeySet",
			Handler:    _KeySetService_DeleteKeySet_Handler,
		},
		{
			MethodName: "ListKeySets",
			Handler:    _KeySetService_ListKeySets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kong/admin/service/v1/key.proto",
}
