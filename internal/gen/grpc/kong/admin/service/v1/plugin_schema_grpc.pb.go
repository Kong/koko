// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kong/admin/service/v1/plugin_schema.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginSchemaServiceClient is the client API for PluginSchemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginSchemaServiceClient interface {
	CreateLuaPluginSchema(ctx context.Context, in *CreateLuaPluginSchemaRequest, opts ...grpc.CallOption) (*CreateLuaPluginSchemaResponse, error)
	GetLuaPluginSchema(ctx context.Context, in *GetLuaPluginSchemaRequest, opts ...grpc.CallOption) (*GetLuaPluginSchemaResponse, error)
	ListLuaPluginSchemas(ctx context.Context, in *ListLuaPluginSchemasRequest, opts ...grpc.CallOption) (*ListLuaPluginSchemasResponse, error)
	UpdateLuaPluginSchema(ctx context.Context, in *UpdateLuaPluginSchemaRequest, opts ...grpc.CallOption) (*UpdateLuaPluginSchemaResponse, error)
}

type pluginSchemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginSchemaServiceClient(cc grpc.ClientConnInterface) PluginSchemaServiceClient {
	return &pluginSchemaServiceClient{cc}
}

func (c *pluginSchemaServiceClient) CreateLuaPluginSchema(ctx context.Context, in *CreateLuaPluginSchemaRequest, opts ...grpc.CallOption) (*CreateLuaPluginSchemaResponse, error) {
	out := new(CreateLuaPluginSchemaResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.PluginSchemaService/CreateLuaPluginSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginSchemaServiceClient) GetLuaPluginSchema(ctx context.Context, in *GetLuaPluginSchemaRequest, opts ...grpc.CallOption) (*GetLuaPluginSchemaResponse, error) {
	out := new(GetLuaPluginSchemaResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.PluginSchemaService/GetLuaPluginSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginSchemaServiceClient) ListLuaPluginSchemas(ctx context.Context, in *ListLuaPluginSchemasRequest, opts ...grpc.CallOption) (*ListLuaPluginSchemasResponse, error) {
	out := new(ListLuaPluginSchemasResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.PluginSchemaService/ListLuaPluginSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginSchemaServiceClient) UpdateLuaPluginSchema(ctx context.Context, in *UpdateLuaPluginSchemaRequest, opts ...grpc.CallOption) (*UpdateLuaPluginSchemaResponse, error) {
	out := new(UpdateLuaPluginSchemaResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.PluginSchemaService/UpdateLuaPluginSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginSchemaServiceServer is the server API for PluginSchemaService service.
// All implementations must embed UnimplementedPluginSchemaServiceServer
// for forward compatibility
type PluginSchemaServiceServer interface {
	CreateLuaPluginSchema(context.Context, *CreateLuaPluginSchemaRequest) (*CreateLuaPluginSchemaResponse, error)
	GetLuaPluginSchema(context.Context, *GetLuaPluginSchemaRequest) (*GetLuaPluginSchemaResponse, error)
	ListLuaPluginSchemas(context.Context, *ListLuaPluginSchemasRequest) (*ListLuaPluginSchemasResponse, error)
	UpdateLuaPluginSchema(context.Context, *UpdateLuaPluginSchemaRequest) (*UpdateLuaPluginSchemaResponse, error)
	mustEmbedUnimplementedPluginSchemaServiceServer()
}

// UnimplementedPluginSchemaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginSchemaServiceServer struct {
}

func (UnimplementedPluginSchemaServiceServer) CreateLuaPluginSchema(context.Context, *CreateLuaPluginSchemaRequest) (*CreateLuaPluginSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLuaPluginSchema not implemented")
}
func (UnimplementedPluginSchemaServiceServer) GetLuaPluginSchema(context.Context, *GetLuaPluginSchemaRequest) (*GetLuaPluginSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLuaPluginSchema not implemented")
}
func (UnimplementedPluginSchemaServiceServer) ListLuaPluginSchemas(context.Context, *ListLuaPluginSchemasRequest) (*ListLuaPluginSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLuaPluginSchemas not implemented")
}
func (UnimplementedPluginSchemaServiceServer) UpdateLuaPluginSchema(context.Context, *UpdateLuaPluginSchemaRequest) (*UpdateLuaPluginSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLuaPluginSchema not implemented")
}
func (UnimplementedPluginSchemaServiceServer) mustEmbedUnimplementedPluginSchemaServiceServer() {}

// UnsafePluginSchemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginSchemaServiceServer will
// result in compilation errors.
type UnsafePluginSchemaServiceServer interface {
	mustEmbedUnimplementedPluginSchemaServiceServer()
}

func RegisterPluginSchemaServiceServer(s grpc.ServiceRegistrar, srv PluginSchemaServiceServer) {
	s.RegisterService(&PluginSchemaService_ServiceDesc, srv)
}

func _PluginSchemaService_CreateLuaPluginSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLuaPluginSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginSchemaServiceServer).CreateLuaPluginSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.PluginSchemaService/CreateLuaPluginSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginSchemaServiceServer).CreateLuaPluginSchema(ctx, req.(*CreateLuaPluginSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginSchemaService_GetLuaPluginSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLuaPluginSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginSchemaServiceServer).GetLuaPluginSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.PluginSchemaService/GetLuaPluginSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginSchemaServiceServer).GetLuaPluginSchema(ctx, req.(*GetLuaPluginSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginSchemaService_ListLuaPluginSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLuaPluginSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginSchemaServiceServer).ListLuaPluginSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.PluginSchemaService/ListLuaPluginSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginSchemaServiceServer).ListLuaPluginSchemas(ctx, req.(*ListLuaPluginSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginSchemaService_UpdateLuaPluginSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLuaPluginSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginSchemaServiceServer).UpdateLuaPluginSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.PluginSchemaService/UpdateLuaPluginSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginSchemaServiceServer).UpdateLuaPluginSchema(ctx, req.(*UpdateLuaPluginSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginSchemaService_ServiceDesc is the grpc.ServiceDesc for PluginSchemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginSchemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong.admin.service.v1.PluginSchemaService",
	HandlerType: (*PluginSchemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLuaPluginSchema",
			Handler:    _PluginSchemaService_CreateLuaPluginSchema_Handler,
		},
		{
			MethodName: "GetLuaPluginSchema",
			Handler:    _PluginSchemaService_GetLuaPluginSchema_Handler,
		},
		{
			MethodName: "ListLuaPluginSchemas",
			Handler:    _PluginSchemaService_ListLuaPluginSchemas_Handler,
		},
		{
			MethodName: "UpdateLuaPluginSchema",
			Handler:    _PluginSchemaService_UpdateLuaPluginSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kong/admin/service/v1/plugin_schema.proto",
}
