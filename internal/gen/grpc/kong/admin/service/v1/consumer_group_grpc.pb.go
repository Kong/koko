// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kong/admin/service/v1/consumer_group.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerGroupServiceClient is the client API for ConsumerGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerGroupServiceClient interface {
	GetConsumerGroup(ctx context.Context, in *GetConsumerGroupRequest, opts ...grpc.CallOption) (*GetConsumerGroupResponse, error)
	CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error)
	UpsertConsumerGroup(ctx context.Context, in *UpsertConsumerGroupRequest, opts ...grpc.CallOption) (*UpsertConsumerGroupResponse, error)
	DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupResponse, error)
	ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error)
	ListConsumerGroupMembers(ctx context.Context, in *ListConsumerGroupMembersRequest, opts ...grpc.CallOption) (*ListConsumerGroupMembersResponse, error)
	CreateConsumerGroupMember(ctx context.Context, in *CreateConsumerGroupMemberRequest, opts ...grpc.CallOption) (*CreateConsumerGroupMemberResponse, error)
	DeleteConsumerGroupMember(ctx context.Context, in *DeleteConsumerGroupMemberRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupMemberResponse, error)
	GetConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *GetConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*GetConsumerGroupRateLimitingAdvancedConfigResponse, error)
	CreateConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *CreateConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*CreateConsumerGroupRateLimitingAdvancedConfigResponse, error)
	UpsertConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *UpsertConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*UpsertConsumerGroupRateLimitingAdvancedConfigResponse, error)
	DeleteConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *DeleteConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupRateLimitingAdvancedConfigResponse, error)
	ListConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *ListConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*ListConsumerGroupRateLimitingAdvancedConfigResponse, error)
}

type consumerGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerGroupServiceClient(cc grpc.ClientConnInterface) ConsumerGroupServiceClient {
	return &consumerGroupServiceClient{cc}
}

func (c *consumerGroupServiceClient) GetConsumerGroup(ctx context.Context, in *GetConsumerGroupRequest, opts ...grpc.CallOption) (*GetConsumerGroupResponse, error) {
	out := new(GetConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/GetConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error) {
	out := new(CreateConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/CreateConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) UpsertConsumerGroup(ctx context.Context, in *UpsertConsumerGroupRequest, opts ...grpc.CallOption) (*UpsertConsumerGroupResponse, error) {
	out := new(UpsertConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/UpsertConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupResponse, error) {
	out := new(DeleteConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/DeleteConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error) {
	out := new(ListConsumerGroupsResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/ListConsumerGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) ListConsumerGroupMembers(ctx context.Context, in *ListConsumerGroupMembersRequest, opts ...grpc.CallOption) (*ListConsumerGroupMembersResponse, error) {
	out := new(ListConsumerGroupMembersResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/ListConsumerGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) CreateConsumerGroupMember(ctx context.Context, in *CreateConsumerGroupMemberRequest, opts ...grpc.CallOption) (*CreateConsumerGroupMemberResponse, error) {
	out := new(CreateConsumerGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/CreateConsumerGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) DeleteConsumerGroupMember(ctx context.Context, in *DeleteConsumerGroupMemberRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupMemberResponse, error) {
	out := new(DeleteConsumerGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/DeleteConsumerGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) GetConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *GetConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*GetConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	out := new(GetConsumerGroupRateLimitingAdvancedConfigResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/GetConsumerGroupRateLimitingAdvancedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) CreateConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *CreateConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*CreateConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	out := new(CreateConsumerGroupRateLimitingAdvancedConfigResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/CreateConsumerGroupRateLimitingAdvancedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) UpsertConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *UpsertConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*UpsertConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	out := new(UpsertConsumerGroupRateLimitingAdvancedConfigResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/UpsertConsumerGroupRateLimitingAdvancedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) DeleteConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *DeleteConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	out := new(DeleteConsumerGroupRateLimitingAdvancedConfigResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/DeleteConsumerGroupRateLimitingAdvancedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerGroupServiceClient) ListConsumerGroupRateLimitingAdvancedConfig(ctx context.Context, in *ListConsumerGroupRateLimitingAdvancedConfigRequest, opts ...grpc.CallOption) (*ListConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	out := new(ListConsumerGroupRateLimitingAdvancedConfigResponse)
	err := c.cc.Invoke(ctx, "/kong.admin.service.v1.ConsumerGroupService/ListConsumerGroupRateLimitingAdvancedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerGroupServiceServer is the server API for ConsumerGroupService service.
// All implementations must embed UnimplementedConsumerGroupServiceServer
// for forward compatibility
type ConsumerGroupServiceServer interface {
	GetConsumerGroup(context.Context, *GetConsumerGroupRequest) (*GetConsumerGroupResponse, error)
	CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error)
	UpsertConsumerGroup(context.Context, *UpsertConsumerGroupRequest) (*UpsertConsumerGroupResponse, error)
	DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*DeleteConsumerGroupResponse, error)
	ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error)
	ListConsumerGroupMembers(context.Context, *ListConsumerGroupMembersRequest) (*ListConsumerGroupMembersResponse, error)
	CreateConsumerGroupMember(context.Context, *CreateConsumerGroupMemberRequest) (*CreateConsumerGroupMemberResponse, error)
	DeleteConsumerGroupMember(context.Context, *DeleteConsumerGroupMemberRequest) (*DeleteConsumerGroupMemberResponse, error)
	GetConsumerGroupRateLimitingAdvancedConfig(context.Context, *GetConsumerGroupRateLimitingAdvancedConfigRequest) (*GetConsumerGroupRateLimitingAdvancedConfigResponse, error)
	CreateConsumerGroupRateLimitingAdvancedConfig(context.Context, *CreateConsumerGroupRateLimitingAdvancedConfigRequest) (*CreateConsumerGroupRateLimitingAdvancedConfigResponse, error)
	UpsertConsumerGroupRateLimitingAdvancedConfig(context.Context, *UpsertConsumerGroupRateLimitingAdvancedConfigRequest) (*UpsertConsumerGroupRateLimitingAdvancedConfigResponse, error)
	DeleteConsumerGroupRateLimitingAdvancedConfig(context.Context, *DeleteConsumerGroupRateLimitingAdvancedConfigRequest) (*DeleteConsumerGroupRateLimitingAdvancedConfigResponse, error)
	ListConsumerGroupRateLimitingAdvancedConfig(context.Context, *ListConsumerGroupRateLimitingAdvancedConfigRequest) (*ListConsumerGroupRateLimitingAdvancedConfigResponse, error)
	mustEmbedUnimplementedConsumerGroupServiceServer()
}

// UnimplementedConsumerGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerGroupServiceServer struct {
}

func (UnimplementedConsumerGroupServiceServer) GetConsumerGroup(context.Context, *GetConsumerGroupRequest) (*GetConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerGroup not implemented")
}
func (UnimplementedConsumerGroupServiceServer) CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerGroup not implemented")
}
func (UnimplementedConsumerGroupServiceServer) UpsertConsumerGroup(context.Context, *UpsertConsumerGroupRequest) (*UpsertConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertConsumerGroup not implemented")
}
func (UnimplementedConsumerGroupServiceServer) DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*DeleteConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerGroup not implemented")
}
func (UnimplementedConsumerGroupServiceServer) ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerGroups not implemented")
}
func (UnimplementedConsumerGroupServiceServer) ListConsumerGroupMembers(context.Context, *ListConsumerGroupMembersRequest) (*ListConsumerGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerGroupMembers not implemented")
}
func (UnimplementedConsumerGroupServiceServer) CreateConsumerGroupMember(context.Context, *CreateConsumerGroupMemberRequest) (*CreateConsumerGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerGroupMember not implemented")
}
func (UnimplementedConsumerGroupServiceServer) DeleteConsumerGroupMember(context.Context, *DeleteConsumerGroupMemberRequest) (*DeleteConsumerGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerGroupMember not implemented")
}
func (UnimplementedConsumerGroupServiceServer) GetConsumerGroupRateLimitingAdvancedConfig(context.Context, *GetConsumerGroupRateLimitingAdvancedConfigRequest) (*GetConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerGroupRateLimitingAdvancedConfig not implemented")
}
func (UnimplementedConsumerGroupServiceServer) CreateConsumerGroupRateLimitingAdvancedConfig(context.Context, *CreateConsumerGroupRateLimitingAdvancedConfigRequest) (*CreateConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerGroupRateLimitingAdvancedConfig not implemented")
}
func (UnimplementedConsumerGroupServiceServer) UpsertConsumerGroupRateLimitingAdvancedConfig(context.Context, *UpsertConsumerGroupRateLimitingAdvancedConfigRequest) (*UpsertConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertConsumerGroupRateLimitingAdvancedConfig not implemented")
}
func (UnimplementedConsumerGroupServiceServer) DeleteConsumerGroupRateLimitingAdvancedConfig(context.Context, *DeleteConsumerGroupRateLimitingAdvancedConfigRequest) (*DeleteConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerGroupRateLimitingAdvancedConfig not implemented")
}
func (UnimplementedConsumerGroupServiceServer) ListConsumerGroupRateLimitingAdvancedConfig(context.Context, *ListConsumerGroupRateLimitingAdvancedConfigRequest) (*ListConsumerGroupRateLimitingAdvancedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerGroupRateLimitingAdvancedConfig not implemented")
}
func (UnimplementedConsumerGroupServiceServer) mustEmbedUnimplementedConsumerGroupServiceServer() {}

// UnsafeConsumerGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerGroupServiceServer will
// result in compilation errors.
type UnsafeConsumerGroupServiceServer interface {
	mustEmbedUnimplementedConsumerGroupServiceServer()
}

func RegisterConsumerGroupServiceServer(s grpc.ServiceRegistrar, srv ConsumerGroupServiceServer) {
	s.RegisterService(&ConsumerGroupService_ServiceDesc, srv)
}

func _ConsumerGroupService_GetConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).GetConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/GetConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).GetConsumerGroup(ctx, req.(*GetConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_CreateConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).CreateConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/CreateConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).CreateConsumerGroup(ctx, req.(*CreateConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_UpsertConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).UpsertConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/UpsertConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).UpsertConsumerGroup(ctx, req.(*UpsertConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_DeleteConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).DeleteConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/DeleteConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).DeleteConsumerGroup(ctx, req.(*DeleteConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_ListConsumerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).ListConsumerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/ListConsumerGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).ListConsumerGroups(ctx, req.(*ListConsumerGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_ListConsumerGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).ListConsumerGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/ListConsumerGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).ListConsumerGroupMembers(ctx, req.(*ListConsumerGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_CreateConsumerGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).CreateConsumerGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/CreateConsumerGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).CreateConsumerGroupMember(ctx, req.(*CreateConsumerGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_DeleteConsumerGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).DeleteConsumerGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/DeleteConsumerGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).DeleteConsumerGroupMember(ctx, req.(*DeleteConsumerGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_GetConsumerGroupRateLimitingAdvancedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerGroupRateLimitingAdvancedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).GetConsumerGroupRateLimitingAdvancedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/GetConsumerGroupRateLimitingAdvancedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).GetConsumerGroupRateLimitingAdvancedConfig(ctx, req.(*GetConsumerGroupRateLimitingAdvancedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_CreateConsumerGroupRateLimitingAdvancedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerGroupRateLimitingAdvancedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).CreateConsumerGroupRateLimitingAdvancedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/CreateConsumerGroupRateLimitingAdvancedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).CreateConsumerGroupRateLimitingAdvancedConfig(ctx, req.(*CreateConsumerGroupRateLimitingAdvancedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_UpsertConsumerGroupRateLimitingAdvancedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertConsumerGroupRateLimitingAdvancedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).UpsertConsumerGroupRateLimitingAdvancedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/UpsertConsumerGroupRateLimitingAdvancedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).UpsertConsumerGroupRateLimitingAdvancedConfig(ctx, req.(*UpsertConsumerGroupRateLimitingAdvancedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_DeleteConsumerGroupRateLimitingAdvancedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerGroupRateLimitingAdvancedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).DeleteConsumerGroupRateLimitingAdvancedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/DeleteConsumerGroupRateLimitingAdvancedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).DeleteConsumerGroupRateLimitingAdvancedConfig(ctx, req.(*DeleteConsumerGroupRateLimitingAdvancedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerGroupService_ListConsumerGroupRateLimitingAdvancedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupRateLimitingAdvancedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerGroupServiceServer).ListConsumerGroupRateLimitingAdvancedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong.admin.service.v1.ConsumerGroupService/ListConsumerGroupRateLimitingAdvancedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerGroupServiceServer).ListConsumerGroupRateLimitingAdvancedConfig(ctx, req.(*ListConsumerGroupRateLimitingAdvancedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerGroupService_ServiceDesc is the grpc.ServiceDesc for ConsumerGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong.admin.service.v1.ConsumerGroupService",
	HandlerType: (*ConsumerGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConsumerGroup",
			Handler:    _ConsumerGroupService_GetConsumerGroup_Handler,
		},
		{
			MethodName: "CreateConsumerGroup",
			Handler:    _ConsumerGroupService_CreateConsumerGroup_Handler,
		},
		{
			MethodName: "UpsertConsumerGroup",
			Handler:    _ConsumerGroupService_UpsertConsumerGroup_Handler,
		},
		{
			MethodName: "DeleteConsumerGroup",
			Handler:    _ConsumerGroupService_DeleteConsumerGroup_Handler,
		},
		{
			MethodName: "ListConsumerGroups",
			Handler:    _ConsumerGroupService_ListConsumerGroups_Handler,
		},
		{
			MethodName: "ListConsumerGroupMembers",
			Handler:    _ConsumerGroupService_ListConsumerGroupMembers_Handler,
		},
		{
			MethodName: "CreateConsumerGroupMember",
			Handler:    _ConsumerGroupService_CreateConsumerGroupMember_Handler,
		},
		{
			MethodName: "DeleteConsumerGroupMember",
			Handler:    _ConsumerGroupService_DeleteConsumerGroupMember_Handler,
		},
		{
			MethodName: "GetConsumerGroupRateLimitingAdvancedConfig",
			Handler:    _ConsumerGroupService_GetConsumerGroupRateLimitingAdvancedConfig_Handler,
		},
		{
			MethodName: "CreateConsumerGroupRateLimitingAdvancedConfig",
			Handler:    _ConsumerGroupService_CreateConsumerGroupRateLimitingAdvancedConfig_Handler,
		},
		{
			MethodName: "UpsertConsumerGroupRateLimitingAdvancedConfig",
			Handler:    _ConsumerGroupService_UpsertConsumerGroupRateLimitingAdvancedConfig_Handler,
		},
		{
			MethodName: "DeleteConsumerGroupRateLimitingAdvancedConfig",
			Handler:    _ConsumerGroupService_DeleteConsumerGroupRateLimitingAdvancedConfig_Handler,
		},
		{
			MethodName: "ListConsumerGroupRateLimitingAdvancedConfig",
			Handler:    _ConsumerGroupService_ListConsumerGroupRateLimitingAdvancedConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kong/admin/service/v1/consumer_group.proto",
}
