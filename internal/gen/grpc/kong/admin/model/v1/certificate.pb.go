// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: kong/admin/model/v1/certificate.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyUsageType int32

const (
	KeyUsageType_KEY_USAGE_TYPE_UNSPECIFIED        KeyUsageType = 0
	KeyUsageType_KEY_USAGE_TYPE_DIGITAL_SIGNATURE  KeyUsageType = 1
	KeyUsageType_KEY_USAGE_TYPE_CONTENT_COMMITMENT KeyUsageType = 2
	KeyUsageType_KEY_USAGE_TYPE_KEY_ENCIPHERMENT   KeyUsageType = 3
	KeyUsageType_KEY_USAGE_TYPE_DATA_ENCIPHERMENT  KeyUsageType = 4
	KeyUsageType_KEY_USAGE_TYPE_KEY_AGREEMENT      KeyUsageType = 5
	KeyUsageType_KEY_USAGE_TYPE_KEY_CERT_SIGN      KeyUsageType = 6
	KeyUsageType_KEY_USAGE_TYPE_CRL_SIGN           KeyUsageType = 7
	KeyUsageType_KEY_USAGE_TYPE_ENCIPHER_ONLY      KeyUsageType = 8
	KeyUsageType_KEY_USAGE_TYPE_DECIPHER_ONLY      KeyUsageType = 9
	// extended usage
	KeyUsageType_KEY_USAGE_TYPE_ANY                               KeyUsageType = 10
	KeyUsageType_KEY_USAGE_TYPE_SERVER_AUTH                       KeyUsageType = 11
	KeyUsageType_KEY_USAGE_TYPE_CLIENT_AUTH                       KeyUsageType = 12
	KeyUsageType_KEY_USAGE_TYPE_CODE_SIGNING                      KeyUsageType = 13
	KeyUsageType_KEY_USAGE_TYPE_EMAIL_PROTECTION                  KeyUsageType = 14
	KeyUsageType_KEY_USAGE_TYPE_IPSEC_END_SYSTEM                  KeyUsageType = 15
	KeyUsageType_KEY_USAGE_TYPE_IPSEC_TUNNEL                      KeyUsageType = 16
	KeyUsageType_KEY_USAGE_TYPE_IPSEC_USER                        KeyUsageType = 17
	KeyUsageType_KEY_USAGE_TYPE_TIME_STAMPING                     KeyUsageType = 18
	KeyUsageType_KEY_USAGE_TYPE_OSCP_SIGNING                      KeyUsageType = 19
	KeyUsageType_KEY_USAGE_TYPE_MICROSOFT_SERVER_GATED_CRYPTO     KeyUsageType = 20
	KeyUsageType_KEY_USAGE_TYPE_NETSCAPE_SERVER_GATED_CRYPTO      KeyUsageType = 21
	KeyUsageType_KEY_USAGE_TYPE_MICROSOFT_COMMERCIAL_CODE_SIGNING KeyUsageType = 22
	KeyUsageType_KEY_USAGE_TYPE_MICROSOFT_KERNEL_CODE_SIGNING     KeyUsageType = 23
)

// Enum value maps for KeyUsageType.
var (
	KeyUsageType_name = map[int32]string{
		0:  "KEY_USAGE_TYPE_UNSPECIFIED",
		1:  "KEY_USAGE_TYPE_DIGITAL_SIGNATURE",
		2:  "KEY_USAGE_TYPE_CONTENT_COMMITMENT",
		3:  "KEY_USAGE_TYPE_KEY_ENCIPHERMENT",
		4:  "KEY_USAGE_TYPE_DATA_ENCIPHERMENT",
		5:  "KEY_USAGE_TYPE_KEY_AGREEMENT",
		6:  "KEY_USAGE_TYPE_KEY_CERT_SIGN",
		7:  "KEY_USAGE_TYPE_CRL_SIGN",
		8:  "KEY_USAGE_TYPE_ENCIPHER_ONLY",
		9:  "KEY_USAGE_TYPE_DECIPHER_ONLY",
		10: "KEY_USAGE_TYPE_ANY",
		11: "KEY_USAGE_TYPE_SERVER_AUTH",
		12: "KEY_USAGE_TYPE_CLIENT_AUTH",
		13: "KEY_USAGE_TYPE_CODE_SIGNING",
		14: "KEY_USAGE_TYPE_EMAIL_PROTECTION",
		15: "KEY_USAGE_TYPE_IPSEC_END_SYSTEM",
		16: "KEY_USAGE_TYPE_IPSEC_TUNNEL",
		17: "KEY_USAGE_TYPE_IPSEC_USER",
		18: "KEY_USAGE_TYPE_TIME_STAMPING",
		19: "KEY_USAGE_TYPE_OSCP_SIGNING",
		20: "KEY_USAGE_TYPE_MICROSOFT_SERVER_GATED_CRYPTO",
		21: "KEY_USAGE_TYPE_NETSCAPE_SERVER_GATED_CRYPTO",
		22: "KEY_USAGE_TYPE_MICROSOFT_COMMERCIAL_CODE_SIGNING",
		23: "KEY_USAGE_TYPE_MICROSOFT_KERNEL_CODE_SIGNING",
	}
	KeyUsageType_value = map[string]int32{
		"KEY_USAGE_TYPE_UNSPECIFIED":                       0,
		"KEY_USAGE_TYPE_DIGITAL_SIGNATURE":                 1,
		"KEY_USAGE_TYPE_CONTENT_COMMITMENT":                2,
		"KEY_USAGE_TYPE_KEY_ENCIPHERMENT":                  3,
		"KEY_USAGE_TYPE_DATA_ENCIPHERMENT":                 4,
		"KEY_USAGE_TYPE_KEY_AGREEMENT":                     5,
		"KEY_USAGE_TYPE_KEY_CERT_SIGN":                     6,
		"KEY_USAGE_TYPE_CRL_SIGN":                          7,
		"KEY_USAGE_TYPE_ENCIPHER_ONLY":                     8,
		"KEY_USAGE_TYPE_DECIPHER_ONLY":                     9,
		"KEY_USAGE_TYPE_ANY":                               10,
		"KEY_USAGE_TYPE_SERVER_AUTH":                       11,
		"KEY_USAGE_TYPE_CLIENT_AUTH":                       12,
		"KEY_USAGE_TYPE_CODE_SIGNING":                      13,
		"KEY_USAGE_TYPE_EMAIL_PROTECTION":                  14,
		"KEY_USAGE_TYPE_IPSEC_END_SYSTEM":                  15,
		"KEY_USAGE_TYPE_IPSEC_TUNNEL":                      16,
		"KEY_USAGE_TYPE_IPSEC_USER":                        17,
		"KEY_USAGE_TYPE_TIME_STAMPING":                     18,
		"KEY_USAGE_TYPE_OSCP_SIGNING":                      19,
		"KEY_USAGE_TYPE_MICROSOFT_SERVER_GATED_CRYPTO":     20,
		"KEY_USAGE_TYPE_NETSCAPE_SERVER_GATED_CRYPTO":      21,
		"KEY_USAGE_TYPE_MICROSOFT_COMMERCIAL_CODE_SIGNING": 22,
		"KEY_USAGE_TYPE_MICROSOFT_KERNEL_CODE_SIGNING":     23,
	}
)

func (x KeyUsageType) Enum() *KeyUsageType {
	p := new(KeyUsageType)
	*p = x
	return p
}

func (x KeyUsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyUsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_kong_admin_model_v1_certificate_proto_enumTypes[0].Descriptor()
}

func (KeyUsageType) Type() protoreflect.EnumType {
	return &file_kong_admin_model_v1_certificate_proto_enumTypes[0]
}

func (x KeyUsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyUsageType.Descriptor instead.
func (KeyUsageType) EnumDescriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_certificate_proto_rawDescGZIP(), []int{0}
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt int32                `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int32                `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Cert      string               `protobuf:"bytes,4,opt,name=cert,proto3" json:"cert,omitempty"`
	Key       string               `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	CertAlt   string               `protobuf:"bytes,6,opt,name=cert_alt,json=certAlt,proto3" json:"cert_alt,omitempty"`
	KeyAlt    string               `protobuf:"bytes,7,opt,name=key_alt,json=keyAlt,proto3" json:"key_alt,omitempty"`
	Tags      []string             `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata  *CertificateMetadata `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_certificate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_certificate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *Certificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Certificate) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Certificate) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Certificate) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *Certificate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Certificate) GetCertAlt() string {
	if x != nil {
		return x.CertAlt
	}
	return ""
}

func (x *Certificate) GetKeyAlt() string {
	if x != nil {
		return x.KeyAlt
	}
	return ""
}

func (x *Certificate) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Certificate) GetMetadata() *CertificateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CertificateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject   string         `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Issuer    string         `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SanNames  []string       `protobuf:"bytes,3,rep,name=san_names,json=sanNames,proto3" json:"san_names,omitempty"`
	Expiry    int32          `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	KeyUsages []KeyUsageType `protobuf:"varint,5,rep,packed,name=key_usages,json=keyUsages,proto3,enum=kong.admin.model.v1.KeyUsageType" json:"key_usages,omitempty"`
	Snis      []string       `protobuf:"bytes,6,rep,name=snis,proto3" json:"snis,omitempty"`
}

func (x *CertificateMetadata) Reset() {
	*x = CertificateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_certificate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMetadata) ProtoMessage() {}

func (x *CertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_certificate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMetadata.ProtoReflect.Descriptor instead.
func (*CertificateMetadata) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *CertificateMetadata) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CertificateMetadata) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CertificateMetadata) GetSanNames() []string {
	if x != nil {
		return x.SanNames
	}
	return nil
}

func (x *CertificateMetadata) GetExpiry() int32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *CertificateMetadata) GetKeyUsages() []KeyUsageType {
	if x != nil {
		return x.KeyUsages
	}
	return nil
}

func (x *CertificateMetadata) GetSnis() []string {
	if x != nil {
		return x.Snis
	}
	return nil
}

var file_kong_admin_model_v1_certificate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50000,
		Name:          "kong.admin.model.v1.referenceable",
		Tag:           "varint,50000,opt,name=referenceable",
		Filename:      "kong/admin/model/v1/certificate.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// Referenceable fields can include the regular value or a reference to the value.
	// https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/reference-format/
	//
	// optional bool referenceable = 50000;
	E_Referenceable = &file_kong_admin_model_v1_certificate_proto_extTypes[0]
)

var File_kong_admin_model_v1_certificate_proto protoreflect.FileDescriptor

var file_kong_admin_model_v1_certificate_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6b, 0x6f, 0x6e, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x03, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x29,
	0x32, 0x27, 0x50, 0x45, 0x4d, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x02, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x29, 0x32, 0x27, 0x50, 0x45, 0x4d, 0x20, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b,
	0x65, 0x79, 0x20, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x29, 0xe2, 0x41, 0x01, 0x02, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x4b, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0x92, 0x41, 0x29, 0x32, 0x27, 0x50, 0x45, 0x4d, 0x20, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20,
	0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92,
	0x41, 0x29, 0x32, 0x27, 0x50, 0x45, 0x4d, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x28, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x41, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6e, 0x69, 0x73, 0x2a, 0xfc, 0x06, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41,
	0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x59,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x45, 0x4e, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x07,
	0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x23, 0x0a,
	0x1f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x45, 0x59, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x43, 0x50,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x4b, 0x45,
	0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x14, 0x12, 0x2f, 0x0a, 0x2b,
	0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x15, 0x12, 0x34, 0x0a,
	0x30, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x16, 0x12, 0x30, 0x0a, 0x2c, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x17, 0x3a, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x3f, 0x5a, 0x3d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x6e, 0x67, 0x2f,
	0x6b, 0x6f, 0x6b, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6b, 0x6f, 0x6e, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kong_admin_model_v1_certificate_proto_rawDescOnce sync.Once
	file_kong_admin_model_v1_certificate_proto_rawDescData = file_kong_admin_model_v1_certificate_proto_rawDesc
)

func file_kong_admin_model_v1_certificate_proto_rawDescGZIP() []byte {
	file_kong_admin_model_v1_certificate_proto_rawDescOnce.Do(func() {
		file_kong_admin_model_v1_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(file_kong_admin_model_v1_certificate_proto_rawDescData)
	})
	return file_kong_admin_model_v1_certificate_proto_rawDescData
}

var file_kong_admin_model_v1_certificate_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kong_admin_model_v1_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kong_admin_model_v1_certificate_proto_goTypes = []interface{}{
	(KeyUsageType)(0),                 // 0: kong.admin.model.v1.KeyUsageType
	(*Certificate)(nil),               // 1: kong.admin.model.v1.Certificate
	(*CertificateMetadata)(nil),       // 2: kong.admin.model.v1.CertificateMetadata
	(*descriptorpb.FieldOptions)(nil), // 3: google.protobuf.FieldOptions
}
var file_kong_admin_model_v1_certificate_proto_depIdxs = []int32{
	2, // 0: kong.admin.model.v1.Certificate.metadata:type_name -> kong.admin.model.v1.CertificateMetadata
	0, // 1: kong.admin.model.v1.CertificateMetadata.key_usages:type_name -> kong.admin.model.v1.KeyUsageType
	3, // 2: kong.admin.model.v1.referenceable:extendee -> google.protobuf.FieldOptions
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	2, // [2:3] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_kong_admin_model_v1_certificate_proto_init() }
func file_kong_admin_model_v1_certificate_proto_init() {
	if File_kong_admin_model_v1_certificate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kong_admin_model_v1_certificate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_certificate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kong_admin_model_v1_certificate_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_kong_admin_model_v1_certificate_proto_goTypes,
		DependencyIndexes: file_kong_admin_model_v1_certificate_proto_depIdxs,
		EnumInfos:         file_kong_admin_model_v1_certificate_proto_enumTypes,
		MessageInfos:      file_kong_admin_model_v1_certificate_proto_msgTypes,
		ExtensionInfos:    file_kong_admin_model_v1_certificate_proto_extTypes,
	}.Build()
	File_kong_admin_model_v1_certificate_proto = out.File
	file_kong_admin_model_v1_certificate_proto_rawDesc = nil
	file_kong_admin_model_v1_certificate_proto_goTypes = nil
	file_kong_admin_model_v1_certificate_proto_depIdxs = nil
}
