// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: kong/admin/model/v1/upstream.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Upstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Algorithm          string                 `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CreatedAt          int32                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int32                  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	HashOn             string                 `protobuf:"bytes,6,opt,name=hash_on,json=hashOn,proto3" json:"hash_on,omitempty"`
	HashFallback       string                 `protobuf:"bytes,7,opt,name=hash_fallback,json=hashFallback,proto3" json:"hash_fallback,omitempty"`
	HashOnHeader       string                 `protobuf:"bytes,8,opt,name=hash_on_header,json=hashOnHeader,proto3" json:"hash_on_header,omitempty"`
	HashFallbackHeader string                 `protobuf:"bytes,9,opt,name=hash_fallback_header,json=hashFallbackHeader,proto3" json:"hash_fallback_header,omitempty"`
	HashOnCookie       string                 `protobuf:"bytes,10,opt,name=hash_on_cookie,json=hashOnCookie,proto3" json:"hash_on_cookie,omitempty"`
	HashOnCookiePath   string                 `protobuf:"bytes,11,opt,name=hash_on_cookie_path,json=hashOnCookiePath,proto3" json:"hash_on_cookie_path,omitempty"`
	Slots              *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=slots,proto3" json:"slots,omitempty"`
	Healthchecks       *Healthchecks          `protobuf:"bytes,13,opt,name=healthchecks,proto3" json:"healthchecks,omitempty"`
	Tags               []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	HostHeader         string                 `protobuf:"bytes,15,opt,name=host_header,json=hostHeader,proto3" json:"host_header,omitempty"` // Certificate client_certificate = 16;
}

func (x *Upstream) Reset() {
	*x = Upstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream) ProtoMessage() {}

func (x *Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream.ProtoReflect.Descriptor instead.
func (*Upstream) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{0}
}

func (x *Upstream) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Upstream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Upstream) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Upstream) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Upstream) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Upstream) GetHashOn() string {
	if x != nil {
		return x.HashOn
	}
	return ""
}

func (x *Upstream) GetHashFallback() string {
	if x != nil {
		return x.HashFallback
	}
	return ""
}

func (x *Upstream) GetHashOnHeader() string {
	if x != nil {
		return x.HashOnHeader
	}
	return ""
}

func (x *Upstream) GetHashFallbackHeader() string {
	if x != nil {
		return x.HashFallbackHeader
	}
	return ""
}

func (x *Upstream) GetHashOnCookie() string {
	if x != nil {
		return x.HashOnCookie
	}
	return ""
}

func (x *Upstream) GetHashOnCookiePath() string {
	if x != nil {
		return x.HashOnCookiePath
	}
	return ""
}

func (x *Upstream) GetSlots() *wrapperspb.Int32Value {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *Upstream) GetHealthchecks() *Healthchecks {
	if x != nil {
		return x.Healthchecks
	}
	return nil
}

func (x *Upstream) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Upstream) GetHostHeader() string {
	if x != nil {
		return x.HostHeader
	}
	return ""
}

type Healthchecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active    *ActiveHealthcheck     `protobuf:"bytes,1,opt,name=active,proto3" json:"active,omitempty"`
	Passive   *PassiveHealthcheck    `protobuf:"bytes,2,opt,name=passive,proto3" json:"passive,omitempty"`
	Threshold *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Healthchecks) Reset() {
	*x = Healthchecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Healthchecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Healthchecks) ProtoMessage() {}

func (x *Healthchecks) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Healthchecks.ProtoReflect.Descriptor instead.
func (*Healthchecks) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{1}
}

func (x *Healthchecks) GetActive() *ActiveHealthcheck {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Healthchecks) GetPassive() *PassiveHealthcheck {
	if x != nil {
		return x.Passive
	}
	return nil
}

func (x *Healthchecks) GetThreshold() *wrapperspb.FloatValue {
	if x != nil {
		return x.Threshold
	}
	return nil
}

type ActiveHealthcheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrency            *wrapperspb.Int32Value    `protobuf:"bytes,1,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Healthy                *ActiveHealthyCondition   `protobuf:"bytes,2,opt,name=healthy,proto3" json:"healthy,omitempty"`
	HttpPath               string                    `protobuf:"bytes,3,opt,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	HttpSni                string                    `protobuf:"bytes,4,opt,name=http_sni,json=httpSni,proto3" json:"http_sni,omitempty"`
	HttpsVerifyCertificate *wrapperspb.BoolValue     `protobuf:"bytes,5,opt,name=https_verify_certificate,json=httpsVerifyCertificate,proto3" json:"https_verify_certificate,omitempty"`
	Type                   string                    `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Timeout                *wrapperspb.Int32Value    `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Unhealthy              *ActiveUnhealthyCondition `protobuf:"bytes,8,opt,name=unhealthy,proto3" json:"unhealthy,omitempty"`
}

func (x *ActiveHealthcheck) Reset() {
	*x = ActiveHealthcheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveHealthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveHealthcheck) ProtoMessage() {}

func (x *ActiveHealthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveHealthcheck.ProtoReflect.Descriptor instead.
func (*ActiveHealthcheck) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{2}
}

func (x *ActiveHealthcheck) GetConcurrency() *wrapperspb.Int32Value {
	if x != nil {
		return x.Concurrency
	}
	return nil
}

func (x *ActiveHealthcheck) GetHealthy() *ActiveHealthyCondition {
	if x != nil {
		return x.Healthy
	}
	return nil
}

func (x *ActiveHealthcheck) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

func (x *ActiveHealthcheck) GetHttpSni() string {
	if x != nil {
		return x.HttpSni
	}
	return ""
}

func (x *ActiveHealthcheck) GetHttpsVerifyCertificate() *wrapperspb.BoolValue {
	if x != nil {
		return x.HttpsVerifyCertificate
	}
	return nil
}

func (x *ActiveHealthcheck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActiveHealthcheck) GetTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ActiveHealthcheck) GetUnhealthy() *ActiveUnhealthyCondition {
	if x != nil {
		return x.Unhealthy
	}
	return nil
}

type PassiveHealthcheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy   *PassiveHealthyCondition   `protobuf:"bytes,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Type      string                     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Unhealthy *PassiveUnhealthyCondition `protobuf:"bytes,3,opt,name=unhealthy,proto3" json:"unhealthy,omitempty"`
}

func (x *PassiveHealthcheck) Reset() {
	*x = PassiveHealthcheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveHealthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveHealthcheck) ProtoMessage() {}

func (x *PassiveHealthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveHealthcheck.ProtoReflect.Descriptor instead.
func (*PassiveHealthcheck) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{3}
}

func (x *PassiveHealthcheck) GetHealthy() *PassiveHealthyCondition {
	if x != nil {
		return x.Healthy
	}
	return nil
}

func (x *PassiveHealthcheck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PassiveHealthcheck) GetUnhealthy() *PassiveUnhealthyCondition {
	if x != nil {
		return x.Unhealthy
	}
	return nil
}

type ActiveHealthyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpStatuses []int32                `protobuf:"varint,1,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	Interval     *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Successes    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=successes,proto3" json:"successes,omitempty"`
}

func (x *ActiveHealthyCondition) Reset() {
	*x = ActiveHealthyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveHealthyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveHealthyCondition) ProtoMessage() {}

func (x *ActiveHealthyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveHealthyCondition.ProtoReflect.Descriptor instead.
func (*ActiveHealthyCondition) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{4}
}

func (x *ActiveHealthyCondition) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *ActiveHealthyCondition) GetInterval() *wrapperspb.Int32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *ActiveHealthyCondition) GetSuccesses() *wrapperspb.Int32Value {
	if x != nil {
		return x.Successes
	}
	return nil
}

type PassiveHealthyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpStatuses []int32                `protobuf:"varint,1,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	Successes    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=successes,proto3" json:"successes,omitempty"`
}

func (x *PassiveHealthyCondition) Reset() {
	*x = PassiveHealthyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveHealthyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveHealthyCondition) ProtoMessage() {}

func (x *PassiveHealthyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveHealthyCondition.ProtoReflect.Descriptor instead.
func (*PassiveHealthyCondition) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{5}
}

func (x *PassiveHealthyCondition) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *PassiveHealthyCondition) GetSuccesses() *wrapperspb.Int32Value {
	if x != nil {
		return x.Successes
	}
	return nil
}

type ActiveUnhealthyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpFailures *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=http_failures,json=httpFailures,proto3" json:"http_failures,omitempty"`
	TcpFailures  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=tcp_failures,json=tcpFailures,proto3" json:"tcp_failures,omitempty"`
	HttpStatuses []int32                `protobuf:"varint,3,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	Timeouts     *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	Interval     *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *ActiveUnhealthyCondition) Reset() {
	*x = ActiveUnhealthyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveUnhealthyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveUnhealthyCondition) ProtoMessage() {}

func (x *ActiveUnhealthyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveUnhealthyCondition.ProtoReflect.Descriptor instead.
func (*ActiveUnhealthyCondition) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{6}
}

func (x *ActiveUnhealthyCondition) GetHttpFailures() *wrapperspb.Int32Value {
	if x != nil {
		return x.HttpFailures
	}
	return nil
}

func (x *ActiveUnhealthyCondition) GetTcpFailures() *wrapperspb.Int32Value {
	if x != nil {
		return x.TcpFailures
	}
	return nil
}

func (x *ActiveUnhealthyCondition) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *ActiveUnhealthyCondition) GetTimeouts() *wrapperspb.Int32Value {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

func (x *ActiveUnhealthyCondition) GetInterval() *wrapperspb.Int32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

type PassiveUnhealthyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpFailures *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=http_failures,json=httpFailures,proto3" json:"http_failures,omitempty"`
	TcpFailures  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=tcp_failures,json=tcpFailures,proto3" json:"tcp_failures,omitempty"`
	HttpStatuses []int32                `protobuf:"varint,3,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	Timeouts     *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
}

func (x *PassiveUnhealthyCondition) Reset() {
	*x = PassiveUnhealthyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveUnhealthyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveUnhealthyCondition) ProtoMessage() {}

func (x *PassiveUnhealthyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kong_admin_model_v1_upstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveUnhealthyCondition.ProtoReflect.Descriptor instead.
func (*PassiveUnhealthyCondition) Descriptor() ([]byte, []int) {
	return file_kong_admin_model_v1_upstream_proto_rawDescGZIP(), []int{7}
}

func (x *PassiveUnhealthyCondition) GetHttpFailures() *wrapperspb.Int32Value {
	if x != nil {
		return x.HttpFailures
	}
	return nil
}

func (x *PassiveUnhealthyCondition) GetTcpFailures() *wrapperspb.Int32Value {
	if x != nil {
		return x.TcpFailures
	}
	return nil
}

func (x *PassiveUnhealthyCondition) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *PassiveUnhealthyCondition) GetTimeouts() *wrapperspb.Int32Value {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

var File_kong_admin_model_v1_upstream_proto protoreflect.FileDescriptor

var file_kong_admin_model_v1_upstream_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6b, 0x6f, 0x6e, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x04, 0x0a, 0x08, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x68, 0x4f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x61, 0x73, 0x68, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0xbf, 0x03, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x73, 0x6e, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70,
	0x53, 0x6e, 0x69, 0x12, 0x54, 0x0a, 0x18, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x6e, 0x67, 0x2f, 0x6b, 0x6f, 0x6b, 0x6f, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x6b, 0x6f, 0x6e, 0x67, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kong_admin_model_v1_upstream_proto_rawDescOnce sync.Once
	file_kong_admin_model_v1_upstream_proto_rawDescData = file_kong_admin_model_v1_upstream_proto_rawDesc
)

func file_kong_admin_model_v1_upstream_proto_rawDescGZIP() []byte {
	file_kong_admin_model_v1_upstream_proto_rawDescOnce.Do(func() {
		file_kong_admin_model_v1_upstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_kong_admin_model_v1_upstream_proto_rawDescData)
	})
	return file_kong_admin_model_v1_upstream_proto_rawDescData
}

var file_kong_admin_model_v1_upstream_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_kong_admin_model_v1_upstream_proto_goTypes = []interface{}{
	(*Upstream)(nil),                  // 0: kong.admin.model.v1.Upstream
	(*Healthchecks)(nil),              // 1: kong.admin.model.v1.Healthchecks
	(*ActiveHealthcheck)(nil),         // 2: kong.admin.model.v1.ActiveHealthcheck
	(*PassiveHealthcheck)(nil),        // 3: kong.admin.model.v1.PassiveHealthcheck
	(*ActiveHealthyCondition)(nil),    // 4: kong.admin.model.v1.ActiveHealthyCondition
	(*PassiveHealthyCondition)(nil),   // 5: kong.admin.model.v1.PassiveHealthyCondition
	(*ActiveUnhealthyCondition)(nil),  // 6: kong.admin.model.v1.ActiveUnhealthyCondition
	(*PassiveUnhealthyCondition)(nil), // 7: kong.admin.model.v1.PassiveUnhealthyCondition
	(*wrapperspb.Int32Value)(nil),     // 8: google.protobuf.Int32Value
	(*wrapperspb.FloatValue)(nil),     // 9: google.protobuf.FloatValue
	(*wrapperspb.BoolValue)(nil),      // 10: google.protobuf.BoolValue
}
var file_kong_admin_model_v1_upstream_proto_depIdxs = []int32{
	8,  // 0: kong.admin.model.v1.Upstream.slots:type_name -> google.protobuf.Int32Value
	1,  // 1: kong.admin.model.v1.Upstream.healthchecks:type_name -> kong.admin.model.v1.Healthchecks
	2,  // 2: kong.admin.model.v1.Healthchecks.active:type_name -> kong.admin.model.v1.ActiveHealthcheck
	3,  // 3: kong.admin.model.v1.Healthchecks.passive:type_name -> kong.admin.model.v1.PassiveHealthcheck
	9,  // 4: kong.admin.model.v1.Healthchecks.threshold:type_name -> google.protobuf.FloatValue
	8,  // 5: kong.admin.model.v1.ActiveHealthcheck.concurrency:type_name -> google.protobuf.Int32Value
	4,  // 6: kong.admin.model.v1.ActiveHealthcheck.healthy:type_name -> kong.admin.model.v1.ActiveHealthyCondition
	10, // 7: kong.admin.model.v1.ActiveHealthcheck.https_verify_certificate:type_name -> google.protobuf.BoolValue
	8,  // 8: kong.admin.model.v1.ActiveHealthcheck.timeout:type_name -> google.protobuf.Int32Value
	6,  // 9: kong.admin.model.v1.ActiveHealthcheck.unhealthy:type_name -> kong.admin.model.v1.ActiveUnhealthyCondition
	5,  // 10: kong.admin.model.v1.PassiveHealthcheck.healthy:type_name -> kong.admin.model.v1.PassiveHealthyCondition
	7,  // 11: kong.admin.model.v1.PassiveHealthcheck.unhealthy:type_name -> kong.admin.model.v1.PassiveUnhealthyCondition
	8,  // 12: kong.admin.model.v1.ActiveHealthyCondition.interval:type_name -> google.protobuf.Int32Value
	8,  // 13: kong.admin.model.v1.ActiveHealthyCondition.successes:type_name -> google.protobuf.Int32Value
	8,  // 14: kong.admin.model.v1.PassiveHealthyCondition.successes:type_name -> google.protobuf.Int32Value
	8,  // 15: kong.admin.model.v1.ActiveUnhealthyCondition.http_failures:type_name -> google.protobuf.Int32Value
	8,  // 16: kong.admin.model.v1.ActiveUnhealthyCondition.tcp_failures:type_name -> google.protobuf.Int32Value
	8,  // 17: kong.admin.model.v1.ActiveUnhealthyCondition.timeouts:type_name -> google.protobuf.Int32Value
	8,  // 18: kong.admin.model.v1.ActiveUnhealthyCondition.interval:type_name -> google.protobuf.Int32Value
	8,  // 19: kong.admin.model.v1.PassiveUnhealthyCondition.http_failures:type_name -> google.protobuf.Int32Value
	8,  // 20: kong.admin.model.v1.PassiveUnhealthyCondition.tcp_failures:type_name -> google.protobuf.Int32Value
	8,  // 21: kong.admin.model.v1.PassiveUnhealthyCondition.timeouts:type_name -> google.protobuf.Int32Value
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_kong_admin_model_v1_upstream_proto_init() }
func file_kong_admin_model_v1_upstream_proto_init() {
	if File_kong_admin_model_v1_upstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kong_admin_model_v1_upstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Healthchecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveHealthcheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveHealthcheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveHealthyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveHealthyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveUnhealthyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kong_admin_model_v1_upstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveUnhealthyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kong_admin_model_v1_upstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kong_admin_model_v1_upstream_proto_goTypes,
		DependencyIndexes: file_kong_admin_model_v1_upstream_proto_depIdxs,
		MessageInfos:      file_kong_admin_model_v1_upstream_proto_msgTypes,
	}.Build()
	File_kong_admin_model_v1_upstream_proto = out.File
	file_kong_admin_model_v1_upstream_proto_rawDesc = nil
	file_kong_admin_model_v1_upstream_proto_goTypes = nil
	file_kong_admin_model_v1_upstream_proto_depIdxs = nil
}
